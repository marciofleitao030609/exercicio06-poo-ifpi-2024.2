class Conta {
    id: number;
    numero: string;
    saldo: number;
    cliente: Cliente | null;

    constructor(id: number, numero: string, saldo: number) {
        this.id = id;
        this.numero = numero;
        this.saldo = saldo;
        this.cliente = null;
    }

    sacar(valor: number): void {
        if (valor > this.saldo) {
            console.log("Saldo insuficiente!");
            return;
        }
        this.saldo -= valor;
    }

    depositar(valor: number): void {
        this.saldo += valor;
    }

    consultarSaldo(): number {
        return this.saldo;
    }

    transferir(contaDestino: Conta, valor: number): void {
        if (valor > this.saldo) {
            console.log("Saldo insuficiente para transferência!");
            return;
        }
        this.sacar(valor);
        contaDestino.depositar(valor);
    }
}

class Cliente {
    id: number;
    nome: string;
    cpf: string;
    dataNascimento: Date;
    contas: Conta[];

    constructor(id: number, nome: string, cpf: string, dataNascimento: Date) {
        this.id = id;
        this.nome = nome;
        this.cpf = cpf;
        this.dataNascimento = dataNascimento;
        this.contas = [];
    }

    adicionarConta(conta: Conta): void {
        if (this.contas.find(c => c.numero === conta.numero)) {
            console.log("Esta conta já está associada a este cliente!");
            return;
        }
        this.contas.push(conta);
        conta.cliente = this;
    }

    listarContas(): void {
        console.log(`Contas do(a) cliente ${this.nome}:`);
        for (let conta of this.contas) {
            console.log(`- Conta número: ${conta.numero}, Saldo: ${conta.saldo}`);
        }
    }

    totalizarSaldo(): number {
        return this.contas.reduce((total, conta) => total + conta.saldo, 0);
    }
}

class Banco {
    private contas: Conta[] = [];
    public clientes: Cliente[] = [];

    constructor() {
        this.contas = [];
        this.clientes = [];
    }

    inserir(c: Conta): void {
        this.contas.push(c);
    }

    consultar(numero: string): Conta | null {
        return this.contas.find(conta => conta.numero === numero) || null;
    }

    private consultarIndice(numero: string): number {
        let indice: number = -1;
        for (let i = 0; i < this.contas.length; i++) {
            if (this.contas[i].numero === numero) {
                indice = i;
                break;
            }
        }
        return indice;
    }

    excluir(numero: string): void {
        const indice = this.consultarIndice(numero);
        if (indice !== -1) {
            this.contas.splice(indice, 1);
            console.log(`Conta número ${numero} excluída com sucesso!`);
        } else {
            console.log("Conta não encontrada!");
        }
    }

    alterar(c: Conta): void {
        const indice = this.consultarIndice(c.numero);
        if (indice !== -1) {
            this.contas[indice] = c;
            console.log(`Conta número ${c.numero} atualizada com sucesso!`);
        } else {
            console.log("Conta não encontrada para atualização!");
        }
    }

    depositar(numero: string, valor: number): void {
        const conta = this.consultar(numero);
        if (conta) {
            conta.depositar(valor);
            console.log(`Depósito de R$${valor} realizado na conta número ${numero}`);
        } else {
            console.log("Conta não encontrada!");
        }
    }

    sacar(numero: string, valor: number): void {
        const conta = this.consultar(numero);
        if (conta) {
            conta.sacar(valor);
            console.log(`Saque de R$${valor} realizado na conta número ${numero}`);
        } else {
            console.log("Conta não encontrada!");
        }
    }

    consultarSaldo(numero: string): number {
        const conta = this.consultar(numero);
        if (conta) {
            return conta.consultarSaldo();
        } else {
            console.log("Conta não encontrada!");
            return 0;
        }
    }

    transferir(numeroCredito: string, numeroDebito: string, valor: number): void {
        const contaCredito = this.consultar(numeroCredito);
        const contaDebito = this.consultar(numeroDebito);

        if (!contaCredito || !contaDebito) {
            console.log("Uma das contas não foi encontrada!");
            return;
        }

        contaDebito.transferir(contaCredito, valor);
        console.log(`Transferência de R$${valor} realizada da conta ${numeroDebito} para a conta ${numeroCredito}`);
    }

    transferirParaVarios(numeroDebito: string, contasDestino: Conta[], valor: number): void {
        const contaDebito = this.consultar(numeroDebito);
        if (!contaDebito) {
            console.log("Conta de débito não encontrada!");
            return;
        }

        contasDestino.forEach(contaDestino => {
            contaDebito.transferir(contaDestino, valor);
            console.log(`Transferência de R$${valor} realizada da conta ${numeroDebito} para a conta ${contaDestino.numero}`);
        });
    }

    quantidadeContas(): number {
        return this.contas.length;
    }

    totalDepositos(): number {
        return this.contas.reduce((total, conta) => total + conta.saldo, 0);
    }

    mediaSaldos(): number {
        const total = this.totalDepositos();
        const quantidade = this.quantidadeContas();
        return quantidade === 0 ? 0 : total / quantidade;
    }

    inserirCliente(cliente: Cliente): void {
        if (this.clientes.find(c => c.id === cliente.id || c.cpf === cliente.cpf)) {
            console.log("Cliente com o mesmo ID ou CPF já existe!");
            return;
        }
        this.clientes.push(cliente);
    }

    consultarCliente(cpf: string): Cliente | null {
        return this.clientes.find(cliente => cliente.cpf === cpf) || null;
    }

    associarContaCliente(numeroConta: string, cpfCliente: string): void {
        const cliente = this.consultarCliente(cpfCliente);
        const conta = this.consultar(numeroConta);

        if (!cliente) {
            console.log("Cliente não encontrado!");
            return;
        }
        if (!conta) {
            console.log("Conta não encontrada!");
            return;
        }
        if (conta.cliente) {
            console.log("Esta conta já está associada a outro cliente!");
            return;
        }
        cliente.adicionarConta(conta);
    }

    listarContasCliente(cpf: string): Conta[] {
        const cliente = this.consultarCliente(cpf);
        if (!cliente) {
            console.log("Cliente não encontrado!");
            return [];
        }
        return cliente.contas;
    }

    totalizarSaldoCliente(cpf: string): any {
        const cliente = this.consultarCliente(cpf);
        if (!cliente) {
            console.log("Cliente não encontrado!");
            return 0;
        }
        console.log("Informações do(a) cliente:");
        console.log(`Nome: ${cliente.nome}`);
        console.log(`CPF: ${cliente.cpf}`);
        cliente.listarContas();
        console.log(`Saldo total: ${cliente.totalizarSaldo()}`);
    }
}
